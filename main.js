/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  RelaxingTodoView: () => RelaxingTodoView,
  VIEW_TYPE_RELAXING_TODO: () => VIEW_TYPE_RELAXING_TODO,
  default: () => RelaxingTodoPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultCategory: "personal",
  enableNotifications: true,
  theme: "default",
  userName: "Vlad",
  language: "ro",
  sidebarPosition: "left",
  autoDeleteExpired: false
};
var VIEW_TYPE_RELAXING_TODO = "relaxing-todo-view";
var RelaxingTodoPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_RELAXING_TODO,
      (leaf) => new RelaxingTodoView(leaf, this)
    );
    const ribbonIconEl = this.addRibbonIcon("checkmark", "MindfulDo - Lista de Task-uri", (evt) => {
      this.activateView();
    });
    ribbonIconEl.addClass("relaxing-todo-ribbon-class");
    this.addCommand({
      id: "open-relaxing-todo",
      name: "Deschide MindfulDo",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new RelaxingTodoSettingTab(this.app, this));
  }
  onunload() {
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_RELAXING_TODO);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      if (this.settings.sidebarPosition === "right") {
        leaf = workspace.getRightLeaf(false);
      } else {
        leaf = workspace.getLeftLeaf(false);
      }
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_RELAXING_TODO, active: true }));
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async moveViewToSidebar(newPosition) {
    const { workspace } = this.app;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_RELAXING_TODO);
    if (leaves.length > 0) {
      const currentLeaf = leaves[0];
      currentLeaf.detach();
      let newLeaf;
      if (newPosition === "right") {
        newLeaf = workspace.getRightLeaf(false);
      } else {
        newLeaf = workspace.getLeftLeaf(false);
      }
      await (newLeaf == null ? void 0 : newLeaf.setViewState({ type: VIEW_TYPE_RELAXING_TODO, active: true }));
      if (newLeaf) {
        workspace.revealLeaf(newLeaf);
      }
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.refreshViews();
  }
  refreshViews() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_RELAXING_TODO);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof RelaxingTodoView) {
        leaf.view.refreshInterface();
      }
    });
  }
};
var RelaxingTodoView = class extends import_obsidian.ItemView {
  // 'tasks', 'reminders', 'calendar'
  constructor(leaf, plugin) {
    super(leaf);
    this.tasks = [];
    this.reminders = [];
    this.currentCategory = "toate";
    this.currentView = "tasks";
    this.currentMonth = new Date().getMonth();
    this.currentYear = new Date().getFullYear();
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_RELAXING_TODO;
  }
  getDisplayText() {
    return "MindfulDo";
  }
  getIcon() {
    return "checkmark";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("mindfuldo-container");
    container.setAttribute("data-theme", this.plugin.settings.theme);
    await this.loadData();
    this.createInterface(container);
    this.updateDateTime();
    setInterval(() => this.updateDateTime(), 1e3);
    this.checkExpiredReminders();
    setInterval(() => this.checkExpiredReminders(), 6e4);
  }
  async onClose() {
  }
  refreshInterface() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("mindfuldo-container");
    container.setAttribute("data-theme", this.plugin.settings.theme);
    this.createInterface(container);
    this.updateDateTime();
    this.renderCurrentView();
  }
  createInterface(container) {
    container.innerHTML = `
			<div class="mindfuldo-content">
				<!-- Header Section -->
				<div class="header">
					<h1 class="greeting" id="greeting"></h1>
					<div class="time-info" id="timeInfo"></div>
				</div>

				<!-- Navigation Tabs -->
				<div class="navigation-tabs">
					<button class="nav-tab active" data-view="tasks">
						<span>\u{1F4DD}</span> ${this.plugin.settings.language === "ro" ? "Sarcini" : "Tasks"}
					</button>
					<button class="nav-tab" data-view="reminders">
						<span>\u23F0</span> ${this.plugin.settings.language === "ro" ? "Amintiri" : "Reminders"}
					</button>
					<button class="nav-tab" data-view="calendar">
						<span>\u{1F4C5}</span> ${this.plugin.settings.language === "ro" ? "Calendar" : "Calendar"}
					</button>
				</div>

				<!-- Tasks View -->
				<div class="view-container" id="tasksView">
					<!-- Input Section -->
					<div class="input-section">
						<div class="input-container">
							<input type="text" class="task-input" id="taskInput" placeholder="${this.getTaskPlaceholder()}">
							<button class="add-btn" id="addBtn">${this.plugin.settings.language === "ro" ? "Adaug\u0103" : "Add"}</button>
						</div>
					</div>

					<!-- Categories -->
					<div class="categories">
						<button class="category-btn active" data-category="toate">
							<span>\u{1F4CB}</span> ${this.plugin.settings.language === "ro" ? "Toate" : "All"}
						</button>
						<button class="category-btn" data-category="work">
							<span>\u{1F4BC}</span> ${this.plugin.settings.language === "ro" ? "Lucru" : "Work"}
						</button>
						<button class="category-btn" data-category="personal">
							<span>\u{1F3AF}</span> Personal
						</button>
						<button class="category-btn" data-category="health">
							<span>\u{1F3C3}\u200D\u2642\uFE0F</span> ${this.plugin.settings.language === "ro" ? "S\u0103n\u0103tate" : "Health"}
						</button>
						<button class="category-btn" data-category="learning">
							<span>\u{1F4DA}</span> ${this.plugin.settings.language === "ro" ? "\xCEnv\u0103\u021Bare" : "Learning"}
						</button>
						<button class="category-btn" data-category="hobby">
							<span>\u{1F3A8}</span> Hobby
						</button>
					</div>

					<!-- Tasks Section -->
					<div class="tasks-section">
						<div class="tasks-header">
							<h2 class="tasks-title">${this.plugin.settings.language === "ro" ? "Sarcinile dvs." : "Your Tasks"}</h2>
							<div class="task-counter" id="taskCounter">0 ${this.plugin.settings.language === "ro" ? "sarcini" : "tasks"}</div>
						</div>
						<div class="tasks-list" id="tasksList"></div>
						<button class="clear-completed" id="clearCompleted" style="display: none;">
							${this.plugin.settings.language === "ro" ? "\u0218terge finalizate" : "Clear Completed"}
						</button>
					</div>
				</div>

				<!-- Reminders View -->
				<div class="view-container" id="remindersView" style="display: none;">
					<!-- Reminder Input Section -->
					<div class="reminders-section">
						<div class="reminders-header">
							<h2 class="reminders-title">${this.plugin.settings.language === "ro" ? "Amintirile tale" : "Your Reminders"}</h2>
							<div class="reminder-counter" id="reminderCounter">0 ${this.plugin.settings.language === "ro" ? "amintiri" : "reminders"}</div>
						</div>

						<div class="reminder-input-section">
							<input type="text" class="reminder-text-input" id="reminderTextInput" placeholder="${this.getReminderPlaceholder()}">
							
							<div class="datetime-inputs">
								<input type="date" class="reminder-date-input" id="reminderDateInput">
								<input type="time" class="reminder-time-input" id="reminderTimeInput">
								<button class="add-reminder-btn" id="addReminderBtn">${this.plugin.settings.language === "ro" ? "Adaug\u0103 amintire" : "Add Reminder"}</button>
							</div>
						</div>

						<div class="reminders-list" id="remindersList"></div>
					</div>
				</div>

				<!-- Calendar View -->
				<div class="view-container" id="calendarView" style="display: none;">
					<div class="calendar-section">
						<div class="calendar-header">
							<button class="calendar-nav-btn" id="prevMonth">\u2039</button>
							<h2 class="calendar-title" id="calendarTitle"></h2>
							<button class="calendar-nav-btn" id="nextMonth">\u203A</button>
						</div>
						<div class="calendar-grid" id="calendarGrid"></div>
						<div class="calendar-legend">
													<div class="legend-item">
							<span class="legend-dot task-dot"></span>
							<span>${this.plugin.settings.language === "ro" ? "Sarcini" : "Tasks"}</span>
						</div>
							<div class="legend-item">
								<span class="legend-dot reminder-dot"></span>
								<span>${this.plugin.settings.language === "ro" ? "Amintiri" : "Reminders"}</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		`;
    this.setupEventListeners();
    this.renderCurrentView();
  }
  setupEventListeners() {
    const addBtn = this.containerEl.querySelector("#addBtn");
    const taskInput = this.containerEl.querySelector("#taskInput");
    const clearCompleted = this.containerEl.querySelector("#clearCompleted");
    const addReminderBtn = this.containerEl.querySelector("#addReminderBtn");
    const reminderTextInput = this.containerEl.querySelector("#reminderTextInput");
    addBtn == null ? void 0 : addBtn.addEventListener("click", () => this.addTask());
    taskInput == null ? void 0 : taskInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter")
        this.addTask();
    });
    clearCompleted == null ? void 0 : clearCompleted.addEventListener("click", () => this.clearCompleted());
    addReminderBtn == null ? void 0 : addReminderBtn.addEventListener("click", () => this.addReminder());
    reminderTextInput == null ? void 0 : reminderTextInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter")
        this.addReminder();
    });
    this.containerEl.querySelectorAll(".category-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const category = e.currentTarget.getAttribute("data-category");
        if (category)
          this.setCategory(category);
      });
    });
    this.containerEl.querySelectorAll(".nav-tab").forEach((tab) => {
      tab.addEventListener("click", (e) => {
        const view = e.currentTarget.getAttribute("data-view");
        if (view) {
          this.currentView = view;
          this.containerEl.querySelectorAll(".nav-tab").forEach((t) => t.classList.remove("active"));
          e.currentTarget.classList.add("active");
          this.containerEl.querySelectorAll(".view-container").forEach((container) => {
            container.style.display = "none";
          });
          const targetView = this.containerEl.querySelector(`#${view}View`);
          if (targetView) {
            targetView.style.display = "block";
          }
          this.renderCurrentView();
        }
      });
    });
  }
  updateDateTime() {
    const now = new Date();
    const hour = now.getHours();
    let greeting = "";
    const userName = this.plugin.settings.userName;
    const isRomanian = this.plugin.settings.language === "ro";
    if (hour >= 5 && hour < 12) {
      greeting = isRomanian ? `Bun\u0103 diminea\u021Ba, ${userName}!` : `Good morning, ${userName}!`;
    } else if (hour >= 12 && hour < 17) {
      greeting = isRomanian ? `Bun\u0103 ziua, ${userName}!` : `Good afternoon, ${userName}!`;
    } else {
      greeting = isRomanian ? `Bun\u0103 seara, ${userName}!` : `Good evening, ${userName}!`;
    }
    const greetingEl = this.containerEl.querySelector("#greeting");
    if (greetingEl)
      greetingEl.textContent = greeting;
    const options = {
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    };
    const locale = isRomanian ? "ro-RO" : "en-US";
    const timeString = now.toLocaleDateString(locale, options);
    const timeEl = this.containerEl.querySelector("#timeInfo");
    if (timeEl)
      timeEl.textContent = timeString;
  }
  async addTask() {
    const taskInput = this.containerEl.querySelector("#taskInput");
    const taskText = taskInput.value.trim();
    if (taskText === "")
      return;
    const task = {
      id: Date.now(),
      text: taskText,
      completed: false,
      category: this.currentCategory === "toate" ? "work" : this.currentCategory,
      createdAt: this.getLocalDateString(new Date())
    };
    this.tasks.push(task);
    await this.saveData();
    taskInput.value = "";
    taskInput.style.transform = "scale(0.99)";
    taskInput.style.background = "rgba(76, 175, 80, 0.15)";
    taskInput.style.borderColor = "#66bb6a";
    setTimeout(() => {
      taskInput.style.transform = "scale(1)";
      taskInput.style.background = "";
      taskInput.style.borderColor = "";
    }, 800);
    setTimeout(() => {
      this.renderCurrentView();
    }, 100);
  }
  setCategory(category) {
    this.currentCategory = category;
    this.containerEl.querySelectorAll(".category-btn").forEach((btn) => {
      btn.classList.remove("active");
    });
    const activeBtn = this.containerEl.querySelector(`[data-category="${category}"]`);
    activeBtn == null ? void 0 : activeBtn.classList.add("active");
    setTimeout(() => {
      this.renderCurrentView();
    }, 150);
  }
  toggleTask(id) {
    const taskIndex = this.tasks.findIndex((task) => task.id === id);
    if (taskIndex !== -1) {
      this.tasks[taskIndex].completed = !this.tasks[taskIndex].completed;
      if (this.tasks[taskIndex].completed) {
        this.tasks[taskIndex].completedAt = this.getLocalDateTimeString(new Date());
      } else {
        delete this.tasks[taskIndex].completedAt;
      }
      this.saveData();
      this.renderCurrentView();
    }
  }
  deleteTask(id) {
    this.tasks = this.tasks.filter((task) => task.id !== id);
    this.saveData();
    this.renderCurrentView();
  }
  clearCompleted() {
    this.tasks = this.tasks.filter((task) => !task.completed);
    this.saveData();
    setTimeout(() => {
      this.renderCurrentView();
    }, 50);
  }
  renderCurrentView() {
    const tasksView = this.containerEl.querySelector("#tasksView");
    const remindersView = this.containerEl.querySelector("#remindersView");
    const calendarView = this.containerEl.querySelector("#calendarView");
    if (this.currentView === "tasks") {
      tasksView == null ? void 0 : tasksView.classList.add("active");
      remindersView == null ? void 0 : remindersView.classList.remove("active");
      calendarView == null ? void 0 : calendarView.classList.remove("active");
      this.renderTasks();
    } else if (this.currentView === "reminders") {
      tasksView == null ? void 0 : tasksView.classList.remove("active");
      remindersView == null ? void 0 : remindersView.classList.add("active");
      calendarView == null ? void 0 : calendarView.classList.remove("active");
      this.renderReminders();
    } else if (this.currentView === "calendar") {
      tasksView == null ? void 0 : tasksView.classList.remove("active");
      remindersView == null ? void 0 : remindersView.classList.remove("active");
      calendarView == null ? void 0 : calendarView.classList.add("active");
      this.renderCalendar();
    }
  }
  renderTasks() {
    const tasksList = this.containerEl.querySelector("#tasksList");
    const taskCounter = this.containerEl.querySelector("#taskCounter");
    const clearCompletedBtn = this.containerEl.querySelector("#clearCompleted");
    if (!tasksList || !taskCounter)
      return;
    let filteredTasks = this.tasks;
    if (this.currentCategory !== "toate") {
      filteredTasks = this.tasks.filter((task) => task.category === this.currentCategory);
    }
    filteredTasks.sort((a, b) => {
      if (a.completed && !b.completed)
        return 1;
      if (!a.completed && b.completed)
        return -1;
      return 0;
    });
    const completedTasks = this.tasks.filter((task) => task.completed);
    const activeTasks = this.tasks.filter((task) => !task.completed);
    taskCounter.textContent = `${activeTasks.length} task${activeTasks.length !== 1 ? "-uri" : ""}`;
    clearCompletedBtn.style.display = completedTasks.length > 0 ? "block" : "none";
    if (filteredTasks.length === 0) {
      tasksList.innerHTML = "";
      return;
    }
    tasksList.innerHTML = filteredTasks.map((task) => `
			<div class="task-item ${task.completed ? "completed" : ""}">
				<div class="task-checkbox ${task.completed ? "checked" : ""}" data-task-id="${task.id}"></div>
				<div class="task-text">${task.text}</div>
				<div class="task-category ${task.category}">${this.getCategoryName(task.category)}</div>
				<button class="task-delete" data-task-id="${task.id}">\xD7</button>
			</div>
		`).join("");
    tasksList.querySelectorAll(".task-checkbox").forEach((checkbox) => {
      checkbox.addEventListener("click", (e) => {
        const taskId = parseInt(e.target.getAttribute("data-task-id") || "0");
        this.toggleTask(taskId);
      });
    });
    tasksList.querySelectorAll(".task-delete").forEach((deleteBtn) => {
      deleteBtn.addEventListener("click", (e) => {
        const taskId = parseInt(e.target.getAttribute("data-task-id") || "0");
        this.deleteTask(taskId);
      });
    });
  }
  getCategoryName(category) {
    const isRomanian = this.plugin.settings.language === "ro";
    const categoryNames = {
      "toate": isRomanian ? "Toate" : "All",
      "lucru": isRomanian ? "Lucru" : "Work",
      "work": isRomanian ? "Lucru" : "Work",
      "personal": "Personal",
      "sanatate": isRomanian ? "S\u0103n\u0103tate" : "Health",
      "health": isRomanian ? "S\u0103n\u0103tate" : "Health",
      "invatare": isRomanian ? "\xCEnv\u0103\u021Bare" : "Learning",
      "learning": isRomanian ? "\xCEnv\u0103\u021Bare" : "Learning",
      "hobby": "Hobby"
    };
    return categoryNames[category] || category;
  }
  async loadTasks() {
    const data = await this.plugin.loadData();
    this.tasks = (data == null ? void 0 : data.tasks) || [];
  }
  async saveTasks() {
    const data = await this.plugin.loadData() || {};
    data.tasks = this.tasks;
    await this.plugin.saveData(data);
  }
  async loadData() {
    const data = await this.plugin.loadData();
    this.tasks = (data == null ? void 0 : data.tasks) || [];
    this.reminders = (data == null ? void 0 : data.reminders) || [];
  }
  async saveData() {
    const data = await this.plugin.loadData() || {};
    data.tasks = this.tasks;
    data.reminders = this.reminders;
    await this.plugin.saveData(data);
  }
  getTaskPlaceholder() {
    if (this.plugin.settings.language === "ro") {
      return `Ce ave\u021Bi de f\u0103cut ast\u0103zi, ${this.plugin.settings.userName}?`;
    } else {
      return `What do you need to do today, ${this.plugin.settings.userName}?`;
    }
  }
  getReminderPlaceholder() {
    if (this.plugin.settings.language === "ro") {
      return "Despre ce s\u0103 v\u0103 amintim?";
    } else {
      return "What should I remind you about?";
    }
  }
  getLocalDateString(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  }
  getLocalDateTimeString(date) {
    const dateStr = this.getLocalDateString(date);
    const hours = String(date.getHours()).padStart(2, "0");
    const minutes = String(date.getMinutes()).padStart(2, "0");
    return `${dateStr}T${hours}:${minutes}`;
  }
  checkExpiredReminders() {
    const now = new Date();
    let hasExpired = false;
    this.reminders.forEach((reminder) => {
      const reminderDate = new Date(reminder.dateTime);
      if (!reminder.expired && reminderDate <= now) {
        reminder.expired = true;
        hasExpired = true;
        if (this.plugin.settings.enableNotifications) {
          new import_obsidian.Notice(`\u23F0 Amintire: ${reminder.text}`, 5e3);
        }
      }
    });
    if (hasExpired) {
      this.saveData();
      if (this.currentView === "reminders") {
        this.renderReminders();
      }
    }
  }
  async addReminder() {
    const reminderTextInput = this.containerEl.querySelector("#reminderTextInput");
    const reminderDateInput = this.containerEl.querySelector("#reminderDateInput");
    const reminderTimeInput = this.containerEl.querySelector("#reminderTimeInput");
    const text = reminderTextInput.value.trim();
    const date = reminderDateInput.value;
    const time = reminderTimeInput.value;
    if (!text || !date || !time) {
      new import_obsidian.Notice(this.plugin.settings.language === "ro" ? "Completa\u021Bi toate c\xE2mpurile pentru amintire!" : "Fill in all fields!");
      return;
    }
    const dateTime = `${date}T${time}`;
    const reminderDate = new Date(dateTime);
    if (reminderDate <= new Date()) {
      new import_obsidian.Notice(this.plugin.settings.language === "ro" ? "V\u0103 rug\u0103m s\u0103 alege\u021Bi o dat\u0103 \u0219i or\u0103 din viitor!" : "Date must be in the future!");
      return;
    }
    const newReminder = {
      id: Date.now(),
      text,
      dateTime,
      expired: false,
      createdAt: this.getLocalDateString(new Date())
    };
    this.reminders.push(newReminder);
    await this.saveData();
    reminderTextInput.value = "";
    reminderDateInput.value = "";
    reminderTimeInput.value = "";
    this.renderReminders();
  }
  deleteReminder(id) {
    this.reminders = this.reminders.filter((reminder) => reminder.id !== id);
    this.saveData();
    this.renderReminders();
  }
  renderReminders() {
    const remindersList = this.containerEl.querySelector("#remindersList");
    const reminderCounter = this.containerEl.querySelector("#reminderCounter");
    if (!remindersList || !reminderCounter)
      return;
    const sortedReminders = this.reminders.sort((a, b) => {
      if (a.expired && !b.expired)
        return 1;
      if (!a.expired && b.expired)
        return -1;
      return new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime();
    });
    const activeReminders = this.reminders.filter((reminder) => !reminder.expired);
    reminderCounter.textContent = `${activeReminders.length} ${this.plugin.settings.language === "ro" ? "amintiri" : "reminders"}`;
    if (sortedReminders.length === 0) {
      remindersList.innerHTML = `
				<div class="empty-reminders">
					<div class="empty-reminders-icon">\u23F0</div>
					<p>${this.plugin.settings.language === "ro" ? "Nicio amintire \xEEnc\u0103. Adaug\u0103 prima pentru a \xEEncepe!" : "No reminders yet. Add your first to get started!"}</p>
				</div>
			`;
      return;
    }
    remindersList.innerHTML = sortedReminders.map((reminder) => {
      const reminderDate = new Date(reminder.dateTime);
      const dateStr = reminderDate.toLocaleDateString("ro-RO");
      const timeStr = reminderDate.toLocaleTimeString("ro-RO", { hour: "2-digit", minute: "2-digit" });
      return `
				<div class="reminder-item ${reminder.expired ? "expired" : ""}">
					<div class="reminder-content">
						<div class="reminder-text">${reminder.text}</div>
						<div class="reminder-time">${dateStr} la ${timeStr}</div>
						${reminder.expired ? `<div class="time-left expired">${this.plugin.settings.language === "ro" ? "Expirat" : "Expired"}</div>` : ""}
					</div>
					<button class="reminder-delete" data-reminder-id="${reminder.id}">\xD7</button>
				</div>
			`;
    }).join("");
    remindersList.querySelectorAll(".reminder-delete").forEach((deleteBtn) => {
      deleteBtn.addEventListener("click", (e) => {
        const reminderId = parseInt(e.target.getAttribute("data-reminder-id") || "0");
        this.deleteReminder(reminderId);
      });
    });
  }
  renderCalendar() {
    const calendarGrid = this.containerEl.querySelector("#calendarGrid");
    const calendarTitle = this.containerEl.querySelector("#calendarTitle");
    if (!calendarGrid || !calendarTitle)
      return;
    const months = this.plugin.settings.language === "ro" ? ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"] : ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    calendarTitle.textContent = `${months[this.currentMonth]} ${this.currentYear}`;
    const firstDay = new Date(this.currentYear, this.currentMonth, 1);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay());
    const dayNames = this.plugin.settings.language === "ro" ? ["D", "L", "M", "M", "J", "V", "S"] : ["S", "M", "T", "W", "T", "F", "S"];
    let calendarHTML = '<div class="calendar-weekdays">';
    dayNames.forEach((day) => {
      calendarHTML += `<div class="calendar-weekday">${day}</div>`;
    });
    calendarHTML += '</div><div class="calendar-days">';
    for (let i = 0; i < 42; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);
      const dateStr = this.getLocalDateString(currentDate);
      const isCurrentMonth = currentDate.getMonth() === this.currentMonth;
      const isToday = currentDate.toDateString() === new Date().toDateString();
      const dayTasks = this.tasks.filter(
        (task) => task.createdAt.startsWith(dateStr)
      );
      const dayReminders = this.reminders.filter(
        (reminder) => reminder.dateTime.startsWith(dateStr)
      );
      let dayClass = "calendar-day";
      if (!isCurrentMonth)
        dayClass += " other-month";
      if (isToday)
        dayClass += " today";
      if (dayTasks.length > 0)
        dayClass += " has-tasks";
      if (dayReminders.length > 0)
        dayClass += " has-reminders";
      calendarHTML += `
				<div class="${dayClass}" data-date="${dateStr}" data-tasks="${dayTasks.length}" data-reminders="${dayReminders.length}">
					<div class="calendar-day-number">${currentDate.getDate()}</div>
					<div class="calendar-day-indicators">
						${dayTasks.length > 0 ? `<span class="indicator task-indicator">${dayTasks.length}</span>` : ""}
						${dayReminders.length > 0 ? `<span class="indicator reminder-indicator">${dayReminders.length}</span>` : ""}
					</div>
				</div>
			`;
    }
    calendarHTML += "</div>";
    calendarHTML += '<div class="calendar-day-details" id="calendarDayDetails" style="display: none;"></div>';
    calendarGrid.innerHTML = calendarHTML;
    this.setupCalendarNavigation();
    this.setupCalendarDayClicks();
  }
  setupCalendarNavigation() {
    var _a, _b;
    const prevBtn = this.containerEl.querySelector("#prevMonth");
    const nextBtn = this.containerEl.querySelector("#nextMonth");
    if (prevBtn) {
      const newPrevBtn = prevBtn.cloneNode(true);
      (_a = prevBtn.parentNode) == null ? void 0 : _a.replaceChild(newPrevBtn, prevBtn);
      newPrevBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.navigateToPreviousMonth();
      });
    }
    if (nextBtn) {
      const newNextBtn = nextBtn.cloneNode(true);
      (_b = nextBtn.parentNode) == null ? void 0 : _b.replaceChild(newNextBtn, nextBtn);
      newNextBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.navigateToNextMonth();
      });
    }
  }
  navigateToPreviousMonth() {
    this.currentMonth--;
    if (this.currentMonth < 0) {
      this.currentMonth = 11;
      this.currentYear--;
    }
    setTimeout(() => {
      this.renderCalendar();
    }, 50);
  }
  navigateToNextMonth() {
    this.currentMonth++;
    if (this.currentMonth > 11) {
      this.currentMonth = 0;
      this.currentYear++;
    }
    setTimeout(() => {
      this.renderCalendar();
    }, 50);
  }
  setupCalendarDayClicks() {
    const calendarDays = this.containerEl.querySelectorAll(".calendar-day");
    calendarDays.forEach((day) => {
      day.addEventListener("click", (e) => {
        const target = e.currentTarget;
        const date = target.getAttribute("data-date");
        const tasksCount = parseInt(target.getAttribute("data-tasks") || "0");
        const remindersCount = parseInt(target.getAttribute("data-reminders") || "0");
        if (date && (tasksCount > 0 || remindersCount > 0)) {
          this.showDayDetails(date, tasksCount, remindersCount);
        }
      });
    });
  }
  showDayDetails(dateStr, tasksCount, remindersCount) {
    const detailsContainer = this.containerEl.querySelector("#calendarDayDetails");
    if (!detailsContainer)
      return;
    const dayTasks = this.tasks.filter(
      (task) => task.createdAt.startsWith(dateStr)
    );
    const dayReminders = this.reminders.filter(
      (reminder) => reminder.dateTime.startsWith(dateStr)
    );
    const date = new Date(dateStr);
    const formattedDate = date.toLocaleDateString(
      this.plugin.settings.language === "ro" ? "ro-RO" : "en-US",
      { weekday: "long", year: "numeric", month: "long", day: "numeric" }
    );
    let detailsHTML = `
			<div class="day-details-header">
				<h3>${formattedDate}</h3>
				<button class="close-details" id="closeDayDetails">\xD7</button>
			</div>
		`;
    if (dayTasks.length > 0) {
      detailsHTML += `
				<div class="day-tasks">
					<h4><span class="task-indicator-small"></span> ${this.plugin.settings.language === "ro" ? "Task-uri" : "Tasks"} (${dayTasks.length})</h4>
					<ul>
						${dayTasks.map((task) => `
							<li class="${task.completed ? "completed" : ""}">
								<span class="task-category-badge ${task.category}">${this.getCategoryName(task.category)}</span>
								${task.text}
							</li>
						`).join("")}
					</ul>
				</div>
			`;
    }
    if (dayReminders.length > 0) {
      detailsHTML += `
				<div class="day-reminders">
					<h4><span class="reminder-indicator-small"></span> ${this.plugin.settings.language === "ro" ? "Amintiri" : "Reminders"} (${dayReminders.length})</h4>
					<ul>
						${dayReminders.map((reminder) => {
        const reminderDate = new Date(reminder.dateTime);
        const timeStr = reminderDate.toLocaleTimeString(
          this.plugin.settings.language === "ro" ? "ro-RO" : "en-US",
          { hour: "2-digit", minute: "2-digit" }
        );
        return `
								<li class="${reminder.expired ? "expired" : ""}">
									<span class="reminder-time-badge">${timeStr}</span>
									${reminder.text}
									${reminder.expired ? `<span class="expired-badge">${this.plugin.settings.language === "ro" ? "Expirat" : "Expired"}</span>` : ""}
								</li>
							`;
      }).join("")}
					</ul>
				</div>
			`;
    }
    detailsContainer.innerHTML = detailsHTML;
    detailsContainer.style.display = "block";
    const closeBtn = detailsContainer.querySelector("#closeDayDetails");
    closeBtn == null ? void 0 : closeBtn.addEventListener("click", () => {
      detailsContainer.style.display = "none";
    });
  }
};
var RelaxingTodoSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const isRomanian = this.plugin.settings.language === "ro";
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Categoria implicit\u0103" : "Default Category").setDesc(isRomanian ? "Categoria care va fi selectat\u0103 automat pentru task-uri noi" : "Category that will be auto-selected for new tasks").addDropdown((dropdown) => dropdown.addOption("personal", "Personal").addOption("lucru", isRomanian ? "Lucru" : "Work").addOption("sanatate", isRomanian ? "S\u0103n\u0103tate" : "Health").addOption("invatare", isRomanian ? "\xCEnv\u0103\u021Bare" : "Learning").addOption("hobby", "Hobby").setValue(this.plugin.settings.defaultCategory).onChange(async (value) => {
      this.plugin.settings.defaultCategory = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Notific\u0103ri" : "Notifications").setDesc(isRomanian ? "Activeaz\u0103 notific\u0103rile pentru reminder-e" : "Enable notifications for reminders").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableNotifications).onChange(async (value) => {
      this.plugin.settings.enableNotifications = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Tem\u0103" : "Theme").setDesc(isRomanian ? "Alege\u021Bi tema de culori" : "Choose color theme").addDropdown((dropdown) => dropdown.addOption("default", "Default").addOption("ocean", "Ocean (Blue-Teal)").addOption("forest", "Forest (Green)").addOption("sunset", "Sunset (Pink-Orange)").addOption("purple", "Purple (Violet)").addOption("midnight", "Midnight (Dark Blue)").setValue(this.plugin.settings.theme).onChange(async (value) => {
      this.plugin.settings.theme = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Numele dumneavoastr\u0103" : "Your Name").setDesc(isRomanian ? "Introduce\u021Bi numele pentru salut\u0103ri personalizate" : "Enter your name for personalized greetings").addText((text) => text.setValue(this.plugin.settings.userName).onChange(async (value) => {
      this.plugin.settings.userName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Limba" : "Language").setDesc(isRomanian ? "Alege\u021Bi limba aplica\u021Biei" : "Choose language").addDropdown((dropdown) => dropdown.addOption("ro", isRomanian ? "Rom\xE2n\u0103" : "Romanian").addOption("en", isRomanian ? "Englez\u0103" : "English").setValue(this.plugin.settings.language).onChange(async (value) => {
      this.plugin.settings.language = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Pozi\u021Bia sidebar-ului" : "Sidebar Position").setDesc(isRomanian ? "Alege\u021Bi pozi\u021Bia sidebar-ului" : "Choose sidebar position").addDropdown((dropdown) => dropdown.addOption("left", isRomanian ? "St\xE2nga" : "Left").addOption("right", isRomanian ? "Dreapta" : "Right").setValue(this.plugin.settings.sidebarPosition).onChange(async (value) => {
      this.plugin.settings.sidebarPosition = value;
      await this.plugin.saveSettings();
      this.plugin.moveViewToSidebar(value);
    }));
    new import_obsidian.Setting(containerEl).setName(isRomanian ? "Auto-\u0219terge expirate" : "Auto-delete Expired").setDesc(isRomanian ? "\u0218terge automat reminder-urile expirate" : "Automatically delete expired reminders").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoDeleteExpired).onChange(async (value) => {
      this.plugin.settings.autoDeleteExpired = value;
      await this.plugin.saveSettings();
    }));
  }
};
